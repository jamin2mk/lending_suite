CREATE OR REPLACE PACKAGE PROCESS_INSTANCE IS

  -- Author  : TRANGNMT
  -- Created : 31/10/2020 5:46:02 PM
  -- Purpose : 

  -- Public type declarations
  TYPE REFCUR IS REF CURSOR;

  -- Public function and procedure declarations
  PROCEDURE INSERT_DTL_BPM_INST_MASTER(iInfo           CLOB,
                                       oInstMasterCode OUT VARCHAR2,
                                       oResult         OUT REFCUR);
  PROCEDURE INSERT_DTL_BPM_INST_BO(iInstMasterCode VARCHAR2,
                                   iData           CLOB,
                                   oResult         OUT REFCUR);

END PROCESS_INSTANCE;
/
CREATE OR REPLACE PACKAGE BODY PROCESS_INSTANCE IS

  PROCEDURE INSERT_DTL_BPM_INST_MASTER(iInfo           CLOB,
                                       oInstMasterCode OUT VARCHAR2,
                                       oResult         OUT REFCUR) AS
  
    vInstMasterCode DTL_BPM_INST_MASTER.INST_MASTER_CODE%TYPE;
    vMessage        VARCHAR2(500);
  
    vjInfo        JSON;
    vInstId       ADM_DATATYPE.CODE_TYPE%TYPE;
    vState        ADM_DATATYPE.STATE_TYPE%TYPE;
    vCreateDate   ADM_DATATYPE.DATE_TYPE%TYPE;
    vDueDate      ADM_DATATYPE.DATE_TYPE%TYPE;
    vModifiedDate ADM_DATATYPE.DATE_TYPE%TYPE;
    vSnapshotId   ADM_DATATYPE.CODE_TYPE%TYPE;
    vBranchId     ADM_DATATYPE.CODE_TYPE%TYPE;
    vProcessAppId ADM_DATATYPE.CODE_TYPE%TYPE;
    vProcessName  ADM_DATATYPE.NAME_TYPE%TYPE;
    vStarterId    ADM_DATATYPE.CODE_TYPE%TYPE;
  BEGIN
    ---- Handle json
    DBMS_OUTPUT.PUT_LINE('===== Handle json data ====='); --logging
  
    vjInfo := JSON(iInfo);
  
    vInstId := json_ext.get_string(vjInfo, 'piid');
    vState  := json_ext.get_string(vjInfo, 'state');
  
    vCreateDate   := json_ext.get_date(vjInfo, 'creationTime');
    vDueDate      := json_ext.get_date(vjInfo, 'dueDate');
    vModifiedDate := json_ext.get_date(vjInfo, 'lastModificationTime');
  
    vSnapshotId   := json_ext.get_string(vjInfo, 'snapshotID');
    vBranchId     := json_ext.get_string(vjInfo, 'branchID');
    vProcessAppId := json_ext.get_string(vjInfo, 'processAppID');
    vProcessName  := json_ext.get_string(vjInfo, 'processTemplateName');
    vStarterId    := json_ext.get_string(vjInfo, 'starterId');
  
    DBMS_OUTPUT.PUT_LINE('Insert into table'); --logging
  
    ---- Generate code
    vInstMasterCode := ULTILITY_COMMON.GEN_CODE('BPM', 'DTL_BPM_MASTER_CODE');
  
    ---- Insert table
    INSERT INTO DTL_BPM_INST_MASTER
      (inst_master_code,
       inst_id,
       state,
       create_date,
       due_date,
       modification_date,
       snapshot_id,
       branch_id,
       process_app_id,
       process_name,
       starter_id)
    VALUES
      (oInstMasterCode,
       vInstId,
       vState,
       vCreateDate,
       vDueDate,
       vModifiedDate,
       vSnapshotId,
       vBranchId,
       vProcessAppId,
       vProcessName,
       vStarterId);
  
    ---- Return result
    OPEN oResult FOR
      SELECT '0' AS LOG_ID, 'SUCCESS' AS LOG_MESSAGE FROM DUAL;
  
    oInstMasterCode := vInstMasterCode;
    COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        ROLLBACK;
        vMessage := SQLERRM;
        OPEN oResult FOR
          SELECT '-1' AS LOG_ID, vMessage AS LOG_MESSAGE FROM DUAL;
      END;
  END INSERT_DTL_BPM_INST_MASTER;

  PROCEDURE INSERT_DTL_BPM_INST_BO(iInstMasterCode VARCHAR2,
                                   iData           CLOB,
                                   oResult         OUT REFCUR) AS
    vMessage VARCHAR2(500);
  BEGIN
  
    INSERT INTO DTL_BPM_INST_BO
      (inst_master_code, data)
    VALUES
      (iInstMasterCode, iData);
  
    OPEN oResult FOR
      SELECT '0' AS LOG_ID, 'SUCCESS' AS LOG_MESSAGE FROM DUAL;
    COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        ROLLBACK;
        vMessage := SQLERRM;
        OPEN oResult FOR
          SELECT '-1' AS LOG_ID, vMessage AS LOG_MESSAGE FROM DUAL;
      END;
  END INSERT_DTL_BPM_INST_BO;

PROCEDURE INSERT_DTL_BPM_INST_TASK(iInstMasterCode VARCHAR2, iData           CLOB,
                                       oResult         OUT REFCUR) AS
  
    vInstMasterCode DTL_BPM_INST_MASTER.INST_MASTER_CODE%TYPE;
    vMessage        VARCHAR2(500);  
    vjTaskList        JSON_LIST;
    
    vTaskId       ADM_DATATYPE.CODE_TYPE%TYPE;
    vData         ADM_DATATYPE.DATA_TYPE%TYPE;
    vState        ADM_DATATYPE.STATE_TYPE%TYPE;
    vCreateDate   ADM_DATATYPE.DATE_TYPE%TYPE;
    vDueDate      ADM_DATATYPE.DATE_TYPE%TYPE;
    vModifiedDate ADM_DATATYPE.DATE_TYPE%TYPE;
    vSnapshotId   ADM_DATATYPE.CODE_TYPE%TYPE;
    vBranchId     ADM_DATATYPE.CODE_TYPE%TYPE;
    vProcessAppId ADM_DATATYPE.CODE_TYPE%TYPE;
    vProcessName  ADM_DATATYPE.NAME_TYPE%TYPE;
    vStarterId    ADM_DATATYPE.CODE_TYPE%TYPE;
  BEGIN
    ---- Handle json
    DBMS_OUTPUT.PUT_LINE('===== Handle json data ====='); --logging
  
    vjTaskList := JSON_LIST(iData);
    
    FOR j IN 1 .. vjTaskList.COUNT LOOP
            vTaskId := json_ext.get_string(json(vjTaskList.get(j)), 'tkiid');
            vData := json_ext.get_json(json(vjTaskList.get(j)), 'data');           
                
         END LOOP;
  
    vInstId := json_ext.get_string(vjInfo, 'piid');
    vState  := json_ext.get_string(vjInfo, 'state');
  
    vCreateDate   := json_ext.get_date(vjInfo, 'creationTime');
    vDueDate      := json_ext.get_date(vjInfo, 'dueDate');
    vModifiedDate := json_ext.get_date(vjInfo, 'lastModificationTime');
  
    vSnapshotId   := json_ext.get_string(vjInfo, 'snapshotID');
    vBranchId     := json_ext.get_string(vjInfo, 'branchID');
    vProcessAppId := json_ext.get_string(vjInfo, 'processAppID');
    vProcessName  := json_ext.get_string(vjInfo, 'processTemplateName');
    vStarterId    := json_ext.get_string(vjInfo, 'starterId');
  
    DBMS_OUTPUT.PUT_LINE('Insert into table'); --logging
  
    ---- Generate code
    vInstMasterCode := ULTILITY_COMMON.GEN_CODE('BPM', 'DTL_BPM_MASTER_CODE');
  
    ---- Insert table
    INSERT INTO DTL_BPM_INST_MASTER
      (inst_master_code,
       inst_id,
       state,
       create_date,
       due_date,
       modification_date,
       snapshot_id,
       branch_id,
       process_app_id,
       process_name,
       starter_id)
    VALUES
      (oInstMasterCode,
       vInstId,
       vState,
       vCreateDate,
       vDueDate,
       vModifiedDate,
       vSnapshotId,
       vBranchId,
       vProcessAppId,
       vProcessName,
       vStarterId);
  
    ---- Return result
    OPEN oResult FOR
      SELECT '0' AS LOG_ID, 'SUCCESS' AS LOG_MESSAGE FROM DUAL;
  
    oInstMasterCode := vInstMasterCode;
    COMMIT;
  
  EXCEPTION
    WHEN OTHERS THEN
      BEGIN
        ROLLBACK;
        vMessage := SQLERRM;
        OPEN oResult FOR
          SELECT '-1' AS LOG_ID, vMessage AS LOG_MESSAGE FROM DUAL;
      END;
  END INSERT_DTL_BPM_INST_TASK;

END PROCESS_INSTANCE;
/
